#include <WiFi.h>
#include <HTTPUpdate.h>
#include <WiFiClientSecure.h>

const char* ssid = "INNOVA OCCIDENTE S.A";
const char* password = "Innova2025";

// URL HTTPS de Supabase Storage
const char* firmwareURL = "https://gayaluhznhhewaamfcoy.supabase.co/storage/v1/object/public/actualizacion//firmware.bin";

// Pin del bot√≥n
const int buttonPin = 4;  // Ajusta seg√∫n tu circuito

// Tiempo que el bot√≥n debe mantenerse presionado (milisegundos)
const unsigned long holdTime = 3000;

void actualizarFirmware();

void setup() {
  Serial.begin(115200);
  delay(1000);

  Serial.println("Init code");
  pinMode(buttonPin, INPUT_PULLUP);  // Bot√≥n activo en LOW

  WiFi.begin(ssid, password);
  Serial.print("Conectando a WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println(" ¬°Conectado!");
}

void loop() {
  if (digitalRead(buttonPin) == LOW) {
    unsigned long startPress = millis();
    while (digitalRead(buttonPin) == LOW) {
      if (millis() - startPress >= holdTime) {
        Serial.println("\nüü° Bot√≥n presionado por 3 segundos. Iniciando actualizaci√≥n...");
        actualizarFirmware();
        break;
      }
      delay(100);
    }
  }

  delay(200);
}

void actualizarFirmware() {
  WiFiClientSecure client;
  client.setInsecure();  // ‚ö†Ô∏è Desactiva la validaci√≥n del certificado (solo para pruebas)

  t_httpUpdate_return ret = httpUpdate.update(client, firmwareURL);

  switch (ret) {
  case HTTP_UPDATE_FAILED:
    Serial.printf("‚ùå Actualizaci√≥n fallida. C√≥digo: %d, error: %s\n",
      httpUpdate.getLastError(),
      httpUpdate.getLastErrorString().c_str());
    break;

  case HTTP_UPDATE_NO_UPDATES:
    Serial.println("‚ÑπÔ∏è No hay actualizaciones disponibles.");
    break;

  case HTTP_UPDATE_OK:
    Serial.println("‚úÖ Actualizaci√≥n completada. Reiniciando...");
    break;
  }
}
